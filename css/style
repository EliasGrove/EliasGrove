<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Scroll Snap with Fade</title>

    <link href="https://fonts.googleapis.com/css2?family=EB+Garamond&family=Inter:wght@400;600&display=swap" rel="stylesheet">

    <script src="https://cdn.tailwindcss.com"></script>

    <style>
        /* --- Basic Reset & Font --- */
        body {
            margin: 0; /* Remove default body margin */
            font-family: 'Inter', sans-serif; /* Your chosen font */
        }

        h1, h2, h3 {
            font-family: 'EB Garamond', serif; /* Your chosen heading font */
            /* Example Tailwind usage - remove if not using Tailwind */
            @apply text-4xl font-bold;
        }

        /* --- Scroll Snap Container (Body) --- */
        body {
            height: 100vh; /* Make body fill the viewport height */
            overflow-y: scroll; /* Ensure the body itself can scroll vertically */
            scroll-snap-type: y mandatory; /* Enable vertical snapping, forcing a snap */
            background-color: #2c3e50; /* Default background if needed */
        }

        /* --- Scroll Snap Items (Sections) --- */
        section {
            height: 100vh; /* Each section must fill the viewport height */
            min-height: 100vh; /* Ensure it fills viewport even with small content */
            scroll-snap-align: start; /* Snap the top of the section to the top of the viewport */
            box-sizing: border-box; /* Include padding in the height calculation */

            /* Basic Styling for Visibility & Content Alignment */
            display: flex;
            align-items: center; /* Vertically center content */
            justify-content: center; /* Horizontally center content (optional) */
            padding: 1.5rem; /* Add some padding */
            position: relative; /* Needed for potential absolute positioning inside */
            text-align: center; /* Center text (optional) */
            color: white; /* Default text color */

            /* --- Fade Effect --- */
            opacity: 0; /* Start sections as invisible */
            transition: opacity 0.8s ease-in-out; /* Smooth transition for opacity */
        }

        /* Class added by JavaScript to make the section visible */
        section.is-visible {
            opacity: 1;
        }

        /* --- Example Backgrounds (Distinguish sections) --- */
        /* Using IDs to target specific sections */
        #section1 { background-color: #34495e; }
        #section2 { background-color: #e74c3c; }
        #section3 { background-color: #2ecc71; }
        #section4 { background-color: #8e44ad; } /* Added another example */

        /* Optional: Style the content container within sections if needed */
        .content-wrapper {
           max-width: 800px; /* Limit content width */
           /* Add other styles for the inner div if you want */
        }

    </style>
</head>
<body>

    <section id="section1">
        <div class="content-wrapper">
             <h1 class="text-white mb-4">Section 1: Welcome</h1>
            <p class="text-white text-lg">Scroll down to explore.</p>
        </div>
    </section>

    <section id="section2">
        <div class="content-wrapper">
            <h2 class="text-white mb-4">Section 2: Features</h2>
            <p class="text-white text-lg">Each section snaps smoothly into view.</p>
        </div>
    </section>

    <section id="section3">
        <div class="content-wrapper">
            <h2 class="text-white mb-4">Section 3: Details</h2>
            <p class="text-white text-lg">A subtle fade adds a nice touch.</p>
        </div>
    </section>

    <section id="section4">
         <div class="content-wrapper">
            <h2 class="text-white mb-4">Section 4: Contact</h2>
            <p class="text-white text-lg">This uses the Intersection Observer API.</p>
        </div>
    </section>

    <script>
        // Wait until the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', () => {

            const sections = document.querySelectorAll('section');

            // Configure the Intersection Observer
            const observerOptions = {
                root: null, // Use the viewport as the root
                rootMargin: '0px',
                threshold: 0.4 // Trigger when 40% of the section is visible (adjust as needed)
            };

            // This function runs when a section's visibility changes
            const observerCallback = (entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        // Element has become visible - add the class to trigger the fade-in
                        entry.target.classList.add('is-visible');
                        // Optional: If you only want the fade-in to happen once per section
                        // observer.unobserve(entry.target);
                    } else {
                        // Optional: Element is no longer visible - remove the class to fade out
                        // Useful if you want sections to fade out when scrolling away quickly
                        // Might need threshold adjustments if it feels jumpy with mandatory snap
                         entry.target.classList.remove('is-visible');
                    }
                });
            };

            // Create the observer instance
            const observer = new IntersectionObserver(observerCallback, observerOptions);

            // Start observing each section element
            sections.forEach(section => {
                observer.observe(section);
            });
        });
    </script>

</body>
</html>
